import { mount, type VueWrapper } from '@vue/test-utils';
import { createPinia } from 'pinia';
import type { Component } from 'vue';
import { createI18n } from 'vue-i18n';

// Создаем мок для i18n
const i18n = createI18n({
  locale: 'en',
  fallbackLocale: 'en',
  messages: {
    en: {
      test: 'Test',
    },
  },
});

// Создаем мок для Pinia
const pinia = createPinia();

// Утилита для монтирования компонентов с необходимыми плагинами
export function mountWithPlugins(component: Component, options: any = {}): VueWrapper<any> {
  return mount(component, {
    global: {
      plugins: [pinia, i18n],
      stubs: {
        // Заглушки для Nuxt компонентов
        NuxtLink: {
          template: '<a><slot /></a>',
          props: ['to'],
        },
        NuxtPage: {
          template: '<div><slot /></div>',
        },
        NuxtLayout: {
          template: '<div><slot /></div>',
        },
        ClientOnly: {
          template: '<div><slot /></div>',
        },
        NuxtIcon: {
          template: '<span><slot /></span>',
          props: ['name'],
        },
        UButton: true,
        UCard: true,
        UContainer: true,
        UModal: true,
        UDropdown: true,
        UAvatar: true,
        UBadge: true,
        UInput: true,
        UTextarea: true,
        UFormGroup: true,
        UForm: true,
        UAlert: true,
        UNotification: true,
        UProgress: true,
        USkeleton: true,
        UTabs: true,
        UAccordion: true,
        UCollapse: true,
        UTooltip: true,
        UPopover: true,
        USelect: true,
        URadio: true,
        UCheckbox: true,
        USwitch: true,
        URange: true,
        URating: true,
        UCalendar: true,
        UDatePicker: true,
        UTimePicker: true,
        UColorPicker: true,
        UFileUpload: true,
        UImage: true,
        UVideo: true,
        UAudio: true,
        UCode: true,
        UMarkdown: true,
        UHtml: true,
        UJson: true,
        UYaml: true,
        UTable: true,
        UDataTable: true,
        UPagination: true,
        UInfiniteScroll: true,
        UVirtualList: true,
        UCarousel: true,
        UGallery: true,
        ULightbox: true,
        UZoom: true,
        UParallax: true,
        UReveal: true,
        UScrollTo: true,
        UScrollArea: true,
        UResizeObserver: true,
        UIntersectionObserver: true,
        UViewport: true,
        UWindow: true,
        UDevice: true,
        UMedia: true,
        UPrint: true,
        UFullscreen: true,
        UKeyboard: true,
        UMouse: true,
        UTouch: true,
        UGesture: true,
        UDrag: true,
        UDrop: true,
        USort: true,
        USwap: true,
        UFlip: true,
      },
    },
    ...options,
  });
}

// Утилита для создания моков Nuxt composables
export function createNuxtMocks() {
  return {
    $router: {
      push: vi.fn(),
      replace: vi.fn(),
      go: vi.fn(),
      back: vi.fn(),
      forward: vi.fn(),
    },
    $route: {
      path: '/',
      query: {},
      params: {},
      hash: '',
      fullPath: '/',
      matched: [],
      meta: {},
      name: 'index',
    },
    $i18n: i18n,
    $t: i18n.global.t,
    localePath: (path: string) => path,
    switchLocalePath: (locale: string) => `/${locale}`,
    getRouteBaseName: () => 'index',
    isPreview: () => false,
    isPrerendered: () => false,
    isHMR: () => false,
    isDev: () => false,
    isClient: () => true,
    isServer: () => false,
  };
}

// Утилита для создания моков VueUse composables
export function createVueUseMocks() {
  return {
    useLocalStorage: vi.fn(() => [ref(''), vi.fn()]),
    useSessionStorage: vi.fn(() => [ref(''), vi.fn()]),
    useCookies: vi.fn(() => ({
      get: vi.fn(),
      set: vi.fn(),
      remove: vi.fn(),
    })),
    useHead: vi.fn(),
    useSeoMeta: vi.fn(),
    useLazyFetch: vi.fn(),
    useFetch: vi.fn(),
    useAsyncData: vi.fn(),
    useLazyAsyncData: vi.fn(),
    useCookie: vi.fn(),
    useRequestHeaders: vi.fn(),
    useRequestURL: vi.fn(),
    useRoute: vi.fn(),
    useRouter: vi.fn(),
    useNuxtApp: vi.fn(),
    useRuntimeConfig: vi.fn(),
    useState: vi.fn(),
    useNuxtData: vi.fn(),
    clearNuxtData: vi.fn(),
    refreshCookie: vi.fn(),
    preloadRouteComponents: vi.fn(),
    prefetchComponents: vi.fn(),
    preloadComponents: vi.fn(),
    navigateTo: vi.fn(),
    abortNavigation: vi.fn(),
    addRouteMiddleware: vi.fn(),
    definePageMeta: vi.fn(),
    defineNuxtComponent: vi.fn(),
    defineNuxtPlugin: vi.fn(),
    defineNuxtRouteMiddleware: vi.fn(),
    defineNuxtLink: vi.fn(),
    defineNuxtConfig: vi.fn(),
    defineNuxtModule: vi.fn(),
    defineNuxtCommand: vi.fn(),
    defineNuxtServerHandler: vi.fn(),
    defineNuxtServerMiddleware: vi.fn(),
    defineNuxtServerPlugin: vi.fn(),
    defineNuxtServerRoute: vi.fn(),
    defineNuxtServerApi: vi.fn(),
    defineNuxtServerComponent: vi.fn(),
    defineNuxtServerPage: vi.fn(),
    defineNuxtServerLayout: vi.fn(),
  };
}

// Утилита для создания моков DOM API
export function createDOMMocks() {
  return {
    getComputedStyle: vi.fn(() => ({
      getPropertyValue: vi.fn(() => '64px'),
    })),
    document: {
      documentElement: {
        style: {},
      },
      body: {
        style: {},
      },
      createElement: vi.fn(() => ({
        style: {},
        setAttribute: vi.fn(),
        getAttribute: vi.fn(),
        removeAttribute: vi.fn(),
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
        querySelector: vi.fn(),
        querySelectorAll: vi.fn(() => []),
        appendChild: vi.fn(),
        removeChild: vi.fn(),
        insertBefore: vi.fn(),
        replaceChild: vi.fn(),
        cloneNode: vi.fn(),
        contains: vi.fn(),
        compareDocumentPosition: vi.fn(),
        isEqualNode: vi.fn(),
        isSameNode: vi.fn(),
        lookupPrefix: vi.fn(),
        lookupNamespaceURI: vi.fn(),
        isDefaultNamespace: vi.fn(),
        insertAdjacentElement: vi.fn(),
        insertAdjacentText: vi.fn(),
        insertAdjacentHTML: vi.fn(),
        scrollIntoView: vi.fn(),
        scrollIntoViewIfNeeded: vi.fn(),
        scroll: vi.fn(),
        scrollTo: vi.fn(),
        scrollBy: vi.fn(),
        getBoundingClientRect: vi.fn(() => ({
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          width: 0,
          height: 0,
          x: 0,
          y: 0,
        })),
        getClientRects: vi.fn(() => []),
        matches: vi.fn(),
        webkitMatchesSelector: vi.fn(),
        mozMatchesSelector: vi.fn(),
        msMatchesSelector: vi.fn(),
        closest: vi.fn(),
      })),
    },
    window: {
      innerWidth: 1024,
      innerHeight: 768,
      scrollX: 0,
      scrollY: 0,
      pageXOffset: 0,
      pageYOffset: 0,
      screenX: 0,
      screenY: 0,
      screenLeft: 0,
      screenTop: 0,
      outerWidth: 1024,
      outerHeight: 768,
      devicePixelRatio: 1,
      colorDepth: 24,
      pixelDepth: 24,
      length: 0,
      closed: false,
      defaultStatus: '',
      status: '',
      name: '',
      location: {
        href: 'http://localhost:3000/',
        protocol: 'http:',
        host: 'localhost:3000',
        hostname: 'localhost',
        port: '3000',
        pathname: '/',
        search: '',
        hash: '',
        origin: 'http://localhost:3000',
        assign: vi.fn(),
        replace: vi.fn(),
        reload: vi.fn(),
        toString: vi.fn(() => 'http://localhost:3000/'),
      },
      history: {
        length: 1,
        scrollRestoration: 'auto',
        state: null,
        back: vi.fn(),
        forward: vi.fn(),
        go: vi.fn(),
        pushState: vi.fn(),
        replaceState: vi.fn(),
      },
      navigator: {
        userAgent: 'Mozilla/5.0 (compatible; Test)',
        platform: 'Test',
        language: 'en-US',
        languages: ['en-US', 'en'],
        cookieEnabled: true,
        onLine: true,
        doNotTrack: null,
        maxTouchPoints: 0,
        hardwareConcurrency: 4,
        deviceMemory: 8,
        connection: {
          effectiveType: '4g',
          rtt: 50,
          downlink: 10,
          saveData: false,
        },
      },
      localStorage: {
        getItem: vi.fn(),
        setItem: vi.fn(),
        removeItem: vi.fn(),
        clear: vi.fn(),
        length: 0,
        key: vi.fn(),
      },
      sessionStorage: {
        getItem: vi.fn(),
        setItem: vi.fn(),
        removeItem: vi.fn(),
        clear: vi.fn(),
        length: 0,
        key: vi.fn(),
      },
      addEventListener: vi.fn(),
      removeEventListener: vi.fn(),
      dispatchEvent: vi.fn(),
      requestAnimationFrame: vi.fn((cb) => setTimeout(cb, 16)),
      cancelAnimationFrame: vi.fn((id) => clearTimeout(id)),
      requestIdleCallback: vi.fn((cb) => setTimeout(cb, 0)),
      cancelIdleCallback: vi.fn((id) => clearTimeout(id)),
      setTimeout: vi.fn((cb, delay) => setTimeout(cb, delay)),
      clearTimeout: vi.fn((id) => clearTimeout(id)),
      setInterval: vi.fn((cb, delay) => setInterval(cb, delay)),
      clearInterval: vi.fn((id) => clearInterval(id)),
      fetch: vi.fn(),
      XMLHttpRequest: vi.fn(),
      WebSocket: vi.fn(),
      Event: vi.fn(),
      CustomEvent: vi.fn(),
      MessageEvent: vi.fn(),
      ErrorEvent: vi.fn(),
      ProgressEvent: vi.fn(),
      FocusEvent: vi.fn(),
      KeyboardEvent: vi.fn(),
      MouseEvent: vi.fn(),
      TouchEvent: vi.fn(),
      WheelEvent: vi.fn(),
      PointerEvent: vi.fn(),
      DragEvent: vi.fn(),
      ClipboardEvent: vi.fn(),
      CompositionEvent: vi.fn(),
      InputEvent: vi.fn(),
      UIEvent: vi.fn(),
      AnimationEvent: vi.fn(),
      TransitionEvent: vi.fn(),
      HashChangeEvent: vi.fn(),
      PageTransitionEvent: vi.fn(),
      PopStateEvent: vi.fn(),
      StorageEvent: vi.fn(),
      BeforeUnloadEvent: vi.fn(),
      UnloadEvent: vi.fn(),
      AbortEvent: vi.fn(),
      CloseEvent: vi.fn(),
    },
  };
}
